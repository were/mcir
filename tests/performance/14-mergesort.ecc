// Acknowledge: ACM Honored Class Compiler Class 2017 provided this test case.
// Acknowledge: ChatGPT4 ports this to my language automatically and (mostly) correctly!

func sort(i32[] a, i32[] b, i32 l, i32 r) -> void {
    if r - l == 1 {
        return;
    }
    let i32 m = (l + r) / 2;
    sort(a, b, l, m);
    sort(a, b, m, r);
    let i32 p = l;
    let i32 q = m;

    let i32 i = 0;
    while p < m && q < r {
        if a[p] > a[q] {
            b[i] = a[q];
            i = i + 1;
            q = q + 1;
        } else {
            b[i] = a[p];
            i = i + 1;
            p = p + 1;
        }
    }
    while p < m {
        b[i] = a[p];
        i = i + 1;
        p = p + 1;
    }
    while q < r {
        b[i] = a[q];
        i = i + 1;
        q = q + 1;
    }
    for i in l..r {
        a[i] = b[i - l];
    }
    return;
}

func main() -> void {
    let i32 n;
    let i32[] a;
    let i32[] b;
    n = nextInt();
    a = new i32[n];
    b = new i32[n];
    let i32 i;
    for i in 0..n {
        a[i] = n - i;
    }
    sort(a, b, 0, n);
    i = n / 2;
    println(toString(a[i] - i));
    return;
}

// [Metadata.stdin]
// 2000000
// [Metadata.end]

// [Metadata.stdout]
// 1
// [Metadata.end]


// int[] b;
// 
// void sort(int[] a,int l,int r)
// {
// 	if(r-l==1) return;
// 	int m=(l+r)/2;
// 	sort(a,l,m);
// 	sort(a,m,r);
// 	int p=l;
// 	int q=m;
// 
// 	int i=0;
// 	while(p<m && q<r)
// 		if(a[p]>a[q])
// 			b[i++]=a[q++];
// 		else
// 			b[i++]=a[p++];
// 	while(p<m) b[i++]=a[p++];
// 	while(q<r) b[i++]=a[q++];
// 	for(i=l;i<r;i++)
// 		a[i]=b[i-l];
// 	return;
// }
// int main()
// {
// 	int n;
// 	int[] a;
// 	n=getInt();
// 	a=new int[n];
//         b = new int[n];
// 	int i;
// 	for(i=0;i<n;i++)
// 		a[i]=n-i;
// 	sort(a,0,n);
// 	i=n/2;
// 	println(toString(a[i]-i));
// 	return 0;
// }
// 
// 
// /*!! metadata:
// === comment ===
// mergesort-515030910633-xianzangyueyang.txt
// naive mergesort
// === input ===
// 2000000
// === assert ===
// output
// === timeout ===
// 4.0
// === output ===
// 1
// === phase ===
// optim extended
// === is_public ===
// True
// 
// !!*/
